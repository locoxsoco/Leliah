/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanasproyecto;

import LogicaNegocio.ClienteBL;
import clases.Cliente;
import clases.Departamento;
import clases.Distrito;
import clases.Empresa;
import clases.Persona;
import clases.Provincia;
import clases.TipoDocumentoIdentidad;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import static ventanasproyecto.ventanaManTrab.tabla;

/**
 *
 * @author Andres
 */
public class ventanaMantCli extends javax.swing.JFrame {

    /**
     * Creates new form ventanaMantCli
     */
    private ArrayList<Cliente> lista;
    private ClienteBL LogicaNegocio;
    public ventanaMantCli() throws ClassNotFoundException, SQLException {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Ventana Mantener Clientes");
        LogicaNegocio = new ClienteBL();
        lista = new ArrayList<Cliente>();
        listarClientes();
        llenarComboBoxDep();
        //tabla.getColumnModel().getColumn(0).setPreferredWidth(10);
        //tabla.getColumnModel().getColumn(1).setPreferredWidth(20);
        //tabla.getColumnModel().getColumn(6).setPreferredWidth(200);
        TapPat.setVisible(false);
        TapMat.setVisible(false);
        apPat.setVisible(false);
        apMat.setVisible(false);
        dir.setVisible(false);
        email.setVisible(false);
        tlf.setVisible(false);
        dirtxt.setVisible(false);
        emailtxt.setVisible(false);
        tlftxt.setVisible(false);
        namae.setVisible(false);
        namaetxt.setVisible(false);
        tipoDoc.setVisible(false);
        numDoc.setVisible(false);
        TnumDoc.setVisible(false);
        TtipoDoc.setVisible(false);
        departamento.setVisible(false);
        provincia.setVisible(false);
        distrito.setVisible(false);
        Tdepartamento.setVisible(false);
        Tprovincia.setVisible(false);
        Tdistrito.setVisible(false);
        registrar.setEnabled(false);
        modificar.setEnabled(false);
        eliminar.setEnabled(false);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        tabla.getColumnModel().getColumn(0).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(1).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(2).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(3).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(4).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(5).setCellRenderer(tcr);
    }
    int idU;
    ventanaAdmin anterior;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        dirtxt = new javax.swing.JLabel();
        emailtxt = new javax.swing.JLabel();
        tlftxt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dir = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        tlf = new javax.swing.JTextField();
        TapPat = new javax.swing.JLabel();
        TapMat = new javax.swing.JLabel();
        apPat = new javax.swing.JTextField();
        apMat = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        namaetxt = new javax.swing.JLabel();
        namae = new javax.swing.JTextField();
        registrar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        tipoCli = new javax.swing.JComboBox<>();
        TnumDoc = new javax.swing.JLabel();
        numDoc = new javax.swing.JTextField();
        TtipoDoc = new javax.swing.JLabel();
        tipoDoc = new javax.swing.JComboBox<>();
        Tdepartamento = new javax.swing.JLabel();
        Tprovincia = new javax.swing.JLabel();
        Tdistrito = new javax.swing.JLabel();
        departamento = new javax.swing.JComboBox<>();
        provincia = new javax.swing.JComboBox<>();
        distrito = new javax.swing.JComboBox<>();
        buscar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        limpiar = new javax.swing.JButton();

        jTextField2.setText("jTextField2");

        jLabel8.setText("jLabel8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(750, 620));
        setPreferredSize(new java.awt.Dimension(750, 620));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Mantener Clientes");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(9, 13, 165, 22);

        dirtxt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        dirtxt.setText("Direccion:");
        getContentPane().add(dirtxt);
        dirtxt.setBounds(380, 213, 64, 16);

        emailtxt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        emailtxt.setText("Correo:");
        getContentPane().add(emailtxt);
        emailtxt.setBounds(380, 93, 49, 16);

        tlftxt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        tlftxt.setText("Telefono:");
        getContentPane().add(tlftxt);
        tlftxt.setBounds(380, 63, 60, 16);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Tipo Cliente:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 63, 79, 16);
        getContentPane().add(dir);
        dir.setBounds(490, 210, 200, 22);
        getContentPane().add(email);
        email.setBounds(490, 90, 200, 22);

        tlf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tlfKeyTyped(evt);
            }
        });
        getContentPane().add(tlf);
        tlf.setBounds(490, 60, 200, 22);

        TapPat.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        TapPat.setText("Apellido Paterno: *");
        getContentPane().add(TapPat);
        TapPat.setBounds(10, 183, 140, 16);

        TapMat.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        TapMat.setText("Apellido Materno: *");
        getContentPane().add(TapMat);
        TapMat.setBounds(10, 213, 140, 16);

        apPat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                apPatKeyTyped(evt);
            }
        });
        getContentPane().add(apPat);
        apPat.setBounds(140, 180, 200, 22);

        apMat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                apMatKeyTyped(evt);
            }
        });
        getContentPane().add(apMat);
        apMat.setBounds(140, 210, 200, 22);

        tabla.setBackground(new java.awt.Color(255, 255, 204));
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tipo Cliente", "DNI/RUC", "Nombre", "Telefono", "Correo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setMinWidth(30);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(0).setMaxWidth(30);
            tabla.getColumnModel().getColumn(1).setMinWidth(80);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(80);
            tabla.getColumnModel().getColumn(1).setMaxWidth(80);
            tabla.getColumnModel().getColumn(2).setMinWidth(100);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(2).setMaxWidth(100);
            tabla.getColumnModel().getColumn(3).setMinWidth(200);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(3).setMaxWidth(200);
            tabla.getColumnModel().getColumn(4).setMinWidth(100);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 290, 700, 230);

        namaetxt.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        namaetxt.setText("Nombre: *");
        getContentPane().add(namaetxt);
        namaetxt.setBounds(10, 93, 120, 20);

        namae.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaeActionPerformed(evt);
            }
        });
        namae.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                namaeKeyTyped(evt);
            }
        });
        getContentPane().add(namae);
        namae.setBounds(140, 90, 200, 22);

        registrar.setBackground(new java.awt.Color(255, 255, 204));
        registrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        registrar.setText("Registrar");
        registrar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarActionPerformed(evt);
            }
        });
        getContentPane().add(registrar);
        registrar.setBounds(12, 250, 100, 29);

        modificar.setBackground(new java.awt.Color(255, 255, 204));
        modificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/modificar.png"))); // NOI18N
        modificar.setText("Modificar");
        modificar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });
        getContentPane().add(modificar);
        modificar.setBounds(262, 250, 100, 29);

        eliminar.setBackground(new java.awt.Color(255, 255, 204));
        eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar.png"))); // NOI18N
        eliminar.setText("Eliminar");
        eliminar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        eliminar.setMaximumSize(new java.awt.Dimension(95, 25));
        eliminar.setMinimumSize(new java.awt.Dimension(95, 25));
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(eliminar);
        eliminar.setBounds(387, 250, 100, 29);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/volver.png"))); // NOI18N
        jButton4.setText("Volver");
        jButton4.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(470, 540, 90, 29);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logout.png"))); // NOI18N
        jButton5.setText("Cerrar Sesión");
        jButton5.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(580, 540, 130, 29);

        tipoCli.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoja...", "Persona", "Empresa" }));
        tipoCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoCliActionPerformed(evt);
            }
        });
        getContentPane().add(tipoCli);
        tipoCli.setBounds(140, 60, 200, 22);

        TnumDoc.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        TnumDoc.setText("Num Documento: *");
        getContentPane().add(TnumDoc);
        TnumDoc.setBounds(10, 123, 130, 16);

        numDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numDocActionPerformed(evt);
            }
        });
        numDoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numDocKeyTyped(evt);
            }
        });
        getContentPane().add(numDoc);
        numDoc.setBounds(140, 120, 200, 22);

        TtipoDoc.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        TtipoDoc.setText("Tipo Documento:");
        getContentPane().add(TtipoDoc);
        TtipoDoc.setBounds(10, 123, 120, 16);

        tipoDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoDocActionPerformed(evt);
            }
        });
        getContentPane().add(tipoDoc);
        tipoDoc.setBounds(140, 120, 200, 22);

        Tdepartamento.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        Tdepartamento.setText("Departamento:");
        getContentPane().add(Tdepartamento);
        Tdepartamento.setBounds(380, 123, 100, 16);

        Tprovincia.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        Tprovincia.setText("Provincia:");
        getContentPane().add(Tprovincia);
        Tprovincia.setBounds(380, 153, 90, 16);

        Tdistrito.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        Tdistrito.setText("Distrito:");
        getContentPane().add(Tdistrito);
        Tdistrito.setBounds(380, 183, 80, 16);

        departamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departamentoActionPerformed(evt);
            }
        });
        getContentPane().add(departamento);
        departamento.setBounds(490, 120, 200, 22);

        provincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                provinciaActionPerformed(evt);
            }
        });
        getContentPane().add(provincia);
        provincia.setBounds(490, 150, 200, 22);

        distrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distritoActionPerformed(evt);
            }
        });
        getContentPane().add(distrito);
        distrito.setBounds(490, 180, 200, 22);

        buscar.setBackground(new java.awt.Color(255, 255, 204));
        buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar.png"))); // NOI18N
        buscar.setText("Buscar");
        buscar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar);
        buscar.setBounds(137, 250, 100, 29);

        jLabel2.setText("La busqueda se realiza con los campos marcados con *.");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 540, 350, 16);

        limpiar.setBackground(new java.awt.Color(255, 255, 204));
        limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nuevo.png"))); // NOI18N
        limpiar.setText("Limpiar Campos");
        limpiar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        limpiar.setMaximumSize(new java.awt.Dimension(95, 25));
        limpiar.setMinimumSize(new java.awt.Dimension(95, 25));
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(limpiar);
        limpiar.setBounds(510, 250, 160, 29);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    javax.swing.table.DefaultTableModel model;
    
    private void listarClientes() throws ClassNotFoundException, SQLException{
        lista = LogicaNegocio.listarClientes();
        model = (javax.swing.table.DefaultTableModel)tabla.getModel();
        int n = lista.size();
        int r = model.getRowCount();
        for (int j=0; j<r; j++){
            model.removeRow(0);
        }
        for (int i=0; i<n; i++){
            String tipo = "";
            String doc = "";
            String nombre ="";
            if(lista.get(i) instanceof Persona){
                tipo = "Persona";
                doc = ((Persona)lista.get(i)).getNumDoc();
                nombre = ((Persona)lista.get(i)).getNombre()+" "+((Persona)lista.get(i)).getApPaterno()+" "+((Persona)lista.get(i)).getApMaterno();
            }else if(lista.get(i) instanceof Empresa){
                tipo = "Empresa";
                doc = ((Empresa)lista.get(i)).getRuc();
                nombre = ((Empresa)lista.get(i)).getNombre();
            }
            Object o[] = {lista.get(i).getIdCliente(), tipo, doc, nombre, lista.get(i).getTelefono(), lista.get(i).getCorreo()};
            model.addRow(o);
        }
    }
    
    private void llenarComboBoxDep() throws ClassNotFoundException, SQLException{
        ArrayList<Departamento> dep = LogicaNegocio.listarDepartamentos();
        //DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        int n = dep.size();
        departamento.removeAllItems();
        for(int i=0; i<n; i++){
            //modelo.addElement(dep.get(i));
            departamento.addItem(dep.get(i));
        }
        departamento.setSelectedItem(departamento.getItemAt(0));
        //departamento.setModel(modelo);
    }
    
    private void registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarActionPerformed
        // TODO add your handling code here:
        boolean a = validarInput();
        if (!a) return;
        model = (javax.swing.table.DefaultTableModel)tabla.getModel();
        //idU++;
        
        Cliente c = null;
        String tipo = tipoCli.getSelectedItem().toString();
        if(tipo.equals("Persona")){
            //System.out.print("j");
            c = new Persona();
            ((Persona)c).setNombre(namae.getText());
            ((Persona)c).setApPaterno(apPat.getText());
            ((Persona)c).setApMaterno(apMat.getText());
            ((Persona)c).setNumDoc(numDoc.getText());
            ((Persona)c).setTipoDoc(((TipoDocumentoIdentidad)tipoDoc.getSelectedItem()));
        }else if(tipo.equals("Empresa")){
            //System.out.print("a");
            c = new Empresa();
            ((Empresa)c).setNombre(namae.getText());
            ((Empresa)c).setRuc(numDoc.getText());
        }
        
        c.setCorreo(email.getText());
        c.setDireccion(dir.getText());
        c.setTelefono(tlf.getText());
        c.setDepartamento(((Departamento)departamento.getSelectedItem()));
        c.setProvincia(((Provincia)provincia.getSelectedItem()));
        c.setDistrito(((Distrito)distrito.getSelectedItem()));
        int err =0;
        try {
            err = LogicaNegocio.registrarCliente(c);
            listarClientes();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Object s[] ={idU, tipoCli.getSelectedItem().toString(), namae.getText(), numDoc.getText(), apPat.getText(), apMat.getText(), dir.getText(), tlf.getText(), email.getText()};
        
        //model.addRow(s);
        if(err ==0){
            dir.setText("");
            email.setText("");
            tlf.setText("");
            namae.setText("");
            numDoc.setText("");
            apPat.setText("");
            tipoCli.setSelectedItem(tipoCli.getItemAt(0));
            apMat.setText("");
            TapPat.setVisible(false);
            TapMat.setVisible(false);
            apPat.setVisible(false);
            apMat.setVisible(false);
            dir.setVisible(false);
            email.setVisible(false);
            tlf.setVisible(false);
            dirtxt.setVisible(false);
            emailtxt.setVisible(false);
            tlftxt.setVisible(false);
            namae.setVisible(false);
            namaetxt.setVisible(false);
            tipoDoc.setVisible(false);
            numDoc.setVisible(false);
            TnumDoc.setVisible(false);
            TtipoDoc.setVisible(false);
            departamento.setVisible(false);
            provincia.setVisible(false);
            distrito.setVisible(false);
            Tdepartamento.setVisible(false);
            Tprovincia.setVisible(false);
            Tdistrito.setVisible(false);
            registrar.setEnabled(false);
            modificar.setEnabled(false);
            eliminar.setEnabled(false);
        }else if(err == 1){
            if(tipo.equals("Persona")){
                JOptionPane.showMessageDialog(null, "El numero de documento de identidad ya se encuentra asociado a otro cliente", "Cliente ya registrado", JOptionPane.PLAIN_MESSAGE);
            }else if(tipo.equals("Empresa")){
                JOptionPane.showMessageDialog(null, "El RUC ya se encuentra asociado a otro cliente", "Cliente ya registrado", JOptionPane.PLAIN_MESSAGE);
            }
            
        }
        
        
    }//GEN-LAST:event_registrarActionPerformed

    private boolean validarInput(){
        String s = this.dir.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        /*for (int i=0; i<s.length(); i++){
            if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == 'ñ' || s.charAt(i) == 'Ñ' || s.charAt(i)== ' ' || (s.charAt(i)>='0' && s.charAt(i)<='9'))){
                JOptionPane.showMessageDialog(null, "campo direccion solo puede contener alfanumericos", "Error Direccion", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
        }*/
        s = this.email.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        int cant = s.length();
        int cantA = 0;
        int cantP = 0;
        int posA = 0;
        for(int i=0; i<cant; i++){
            if(s.charAt(i) == '@'){
                cantA++;
                posA = i;
            }
            if((cantA == 1) && (i > posA+1)){
                if(s.charAt(i)=='.'){
                    cantP++;
                }
            }
        }
        
        if(cantA!=1 || cantP <1){
            JOptionPane.showMessageDialog(null, "El correo deber tener una @ y almenos un punto luego de la arroba separado por minimo un caracter", "Error Correo", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(s.charAt(posA+1) == '.'){
            JOptionPane.showMessageDialog(null, "El correo no puede tener un punto inmediatamente luego de un @", "Error Correo", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(!(s.charAt(cant-2)>='a' && s.charAt(cant-2)<='z') || !(s.charAt(cant-1)>='a' && s.charAt(cant-1)<='z')){
            JOptionPane.showMessageDialog(null, "Los ultimos 2 caracteres del correo deben ser letras minusculas", "Error Correo", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        
        s = this.tlf.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        for (int i=0; i<s.length(); i++){
            if(!(s.charAt(i)>='0' && s.charAt(i)<='9')){
                JOptionPane.showMessageDialog(null, "campo telefono solo puede contener numeros", "Error Telefono", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
        }
        if(s.length()!=9){
            JOptionPane.showMessageDialog(null, "campo telefono debe ser 9 digitos", "Error Telefono", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        s = this.tipoCli.getSelectedItem().toString();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        s = this.namae.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        for (int i=0; i<s.length(); i++){
            if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == 'ñ' || s.charAt(i) == 'Ñ' || s.charAt(i)== ' ')){
                JOptionPane.showMessageDialog(null, "campo nombre solo puede contener letras", "Error Nombre", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
        }
        if(this.tipoCli.getSelectedItem().toString() == "Persona"){
            s = this.numDoc.getText();
            if((s).equals("")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            
            TipoDocumentoIdentidad t = (TipoDocumentoIdentidad) tipoDoc.getSelectedItem();
            if(s.length() != t.getCantChar()){
                JOptionPane.showMessageDialog(null, "El "+t.getNombTipo()+ " debe tener "+t.getCantChar()+" digitos", "Error Documento", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            
            s = this.apPat.getText();
            if((s).equals("")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            for (int i=0; i<s.length(); i++){
                if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == 'ñ' || s.charAt(i) == 'Ñ' || s.charAt(i)== ' ')){
                    JOptionPane.showMessageDialog(null, "campo apellido paterno solo puede contener letras", "Error Apellido Paterno", JOptionPane.PLAIN_MESSAGE);
                    return false;
                }
            }
            s = this.apMat.getText();
            if((s).equals("")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            for (int i=0; i<s.length(); i++){
                if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == 'ñ' || s.charAt(i) == 'Ñ' || s.charAt(i)== ' ')){
                    JOptionPane.showMessageDialog(null, "campo apellido materno solo puede contener letras", "Error Apellido Materno", JOptionPane.PLAIN_MESSAGE);
                    return false;
                }
            }  
        }else if(this.tipoCli.getSelectedItem().toString() == "Empresa"){
            s = this.numDoc.getText();
            if((s).equals("")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            
            if((s).length() != 10){
                JOptionPane.showMessageDialog(null, "RUC debe tener 10 digitos", "Error DNI", JOptionPane.PLAIN_MESSAGE);
                return false;
            }

            s = this.namae.getText();
            if((s).equals("")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            for (int i=0; i<s.length(); i++){
                if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == 'ñ' || s.charAt(i) == 'Ñ' || s.charAt(i)== ' ' || (s.charAt(i)>='0' && s.charAt(i)<='9'))){
                    JOptionPane.showMessageDialog(null, "campo razon social materno solo puede contener alfanumericos", "Error Razon Social", JOptionPane.PLAIN_MESSAGE);
                    return false;
                }
            }
        }
        
        return true;
    }
    
    private void tipoCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoCliActionPerformed
        // TODO add your handling code here:
        String s = this.tipoCli.getSelectedItem().toString();
        if(s == "Escoja..."){
            TapPat.setVisible(false);
            TapMat.setVisible(false);
            apPat.setVisible(false);
            apMat.setVisible(false);
            dir.setVisible(false);
            email.setVisible(false);
            tlf.setVisible(false);
            dirtxt.setVisible(false);
            emailtxt.setVisible(false);
            tlftxt.setVisible(false);
            namae.setVisible(false);
            namaetxt.setVisible(false);
            tipoDoc.setVisible(false);
            numDoc.setVisible(false);
            TnumDoc.setVisible(false);
            TtipoDoc.setVisible(false);
            departamento.setVisible(false);
            provincia.setVisible(false);
            distrito.setVisible(false);
            Tdepartamento.setVisible(false);
            Tprovincia.setVisible(false);
            Tdistrito.setVisible(false);
            registrar.setEnabled(false);
            modificar.setEnabled(false);
            eliminar.setEnabled(false);
            
        }else if (s == "Persona"){
            TapPat.setVisible(true);
            TapMat.setVisible(true);
            apPat.setVisible(true);
            apMat.setVisible(true);
            email.setVisible(true);
            tlf.setVisible(true);
            emailtxt.setVisible(true);
            tlftxt.setVisible(true);
            namae.setVisible(true);
            namaetxt.setVisible(true);
            namaetxt.setText("Nombre: *");
            numDoc.setBounds(numDoc.getX(), 150, numDoc.getWidth(), numDoc.getHeight());
            TnumDoc.setBounds(TnumDoc.getX(), 153, TnumDoc.getWidth(), TnumDoc.getHeight());
            tipoDoc.setVisible(true);
            numDoc.setVisible(true);
            TnumDoc.setVisible(true);
            TnumDoc.setText("Num Documento: *");
            TtipoDoc.setVisible(true);
            departamento.setVisible(true);
            Tdepartamento.setVisible(true);
            registrar.setEnabled(true);
            try {
                llenarBoxComboTipo();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (s == "Empresa"){
            
            TapPat.setVisible(false);
            TapMat.setVisible(false);
            apPat.setVisible(false);
            apMat.setVisible(false);
            email.setVisible(true);
            tlf.setVisible(true);
            emailtxt.setVisible(true);
            tlftxt.setVisible(true);
            namae.setVisible(true);
            namaetxt.setVisible(true);
            namaetxt.setText("Razon Social: *");
            numDoc.setBounds(numDoc.getX(), 120, numDoc.getWidth(), numDoc.getHeight());
            TnumDoc.setBounds(TnumDoc.getX(), 123, TnumDoc.getWidth(), TnumDoc.getHeight());
            tipoDoc.setVisible(false);
            numDoc.setVisible(true);
            TnumDoc.setVisible(true);
            TnumDoc.setText("RUC: *");
            TtipoDoc.setVisible(false);
            departamento.setVisible(true);
            Tdepartamento.setVisible(true);
            registrar.setEnabled(true);
        }
    }//GEN-LAST:event_tipoCliActionPerformed

    private void llenarBoxComboTipo() throws ClassNotFoundException, SQLException{
        ArrayList<TipoDocumentoIdentidad> doc = LogicaNegocio.listarTipoDocumento();
        //DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        int n = doc.size();
        tipoDoc.removeAllItems();
        for(int i=0; i<n; i++){
            //modelo.addElement(doc.get(i));
            tipoDoc.addItem(doc.get(i));
        }
        //tipoDoc.setModel(modelo);
    }
    
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        // TODO add your handling code here:
        int n = tabla.getSelectedRow();
        model = (javax.swing.table.DefaultTableModel)tabla.getModel();
        
//        dir.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 8)));
//        email.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 10)));
//        tlf.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 9)));
//        tipoCli.setSelectedItem(model.getValueAt(tabla.getSelectedRow(), 1));

        
        modificar.setEnabled(true);
        eliminar.setEnabled(true);
        
        try {
            //System.out.println(lista.get(n).getDepartamento().getNombDep());
            if(provincia.getItemCount()<1){
                llenarComboBoxProv(lista.get(n).getDepartamento().getIdDep());
            }
            //System.out.println(lista.get(n).getProvincia().getNombProv());
            llenarComboBoxDist(lista.get(n).getProvincia().getIdProv());
            //dni.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 6)));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //tipoUser.setSelectedItem(model.getValueAt(tabla.getSelectedRow(), 7));
        if(lista.get(n) instanceof Persona){
            
            tipoCli.setSelectedItem(tipoCli.getItemAt(1));
            numDoc.setVisible(true);
            TapPat.setVisible(true);
            TapMat.setVisible(true);
            apPat.setVisible(true);
            apMat.setVisible(true);
            email.setVisible(true);
            tlf.setVisible(true);
            emailtxt.setVisible(true);
            tlftxt.setVisible(true);
            namae.setVisible(true);
            namaetxt.setVisible(true);
            namaetxt.setText("Nombre:");
            tipoDoc.setVisible(true);
            numDoc.setVisible(true);
            TnumDoc.setVisible(true);
            TnumDoc.setText("Num Documento:");
            TtipoDoc.setVisible(true);
            departamento.setVisible(true);
            Tdepartamento.setVisible(true);
            provincia.setVisible(true);
            Tprovincia.setVisible(true);
            distrito.setVisible(true);
            Tdistrito.setVisible(true);
            registrar.setEnabled(true);
            dir.setVisible(true);
            dirtxt.setVisible(true);
            
            numDoc.setText(((Persona)lista.get(n)).getNumDoc());
            namae.setText(((Persona)lista.get(n)).getNombre());
            int pos =0;
            for(int index=0; index<tipoDoc.getItemCount(); index++){
                TipoDocumentoIdentidad d = (TipoDocumentoIdentidad) (tipoDoc.getItemAt(index));
                if(((Persona)lista.get(n)).getTipoDoc().getIdTipo()== d.getIdTipo()){
                    pos = index;
                    break;
                }
            }
            tipoDoc.setSelectedItem(tipoDoc.getItemAt(pos));
            apPat.setText(((Persona)lista.get(n)).getApPaterno());
            apMat.setText(((Persona)lista.get(n)).getApMaterno());
            
            
        }else if(lista.get(n) instanceof Empresa){

            tipoCli.setSelectedItem(tipoCli.getItemAt(2));
            numDoc.setVisible(true);
            TapPat.setVisible(false);
            TapMat.setVisible(false);
            apPat.setVisible(false);
            apMat.setVisible(false);
            email.setVisible(true);
            tlf.setVisible(true);
            emailtxt.setVisible(true);
            tlftxt.setVisible(true);
            namae.setVisible(true);
            namaetxt.setVisible(true);
            namaetxt.setText("Razon Social:");
            tipoDoc.setVisible(false);
            TnumDoc.setVisible(true);
            TnumDoc.setText("RUC:");
            TtipoDoc.setVisible(false);
            departamento.setVisible(true);
            Tdepartamento.setVisible(true);
            provincia.setVisible(true);
            Tprovincia.setVisible(true);
            distrito.setVisible(true);
            Tdistrito.setVisible(true);
            registrar.setEnabled(true);
            dir.setVisible(true);
            dirtxt.setVisible(true);
            
            numDoc.setText(((Empresa)lista.get(n)).getRuc());
            namae.setText(((Empresa)lista.get(n)).getNombre());
        }
        
        dir.setText(lista.get(n).getDireccion());
        email.setText(lista.get(n).getCorreo());
        tlf.setText(lista.get(n).getTelefono());
        
        int pos =0;
        for(int index=0; index<departamento.getItemCount(); index++){
            Departamento d = (Departamento) (departamento.getItemAt(index));
            if(lista.get(n).getDepartamento().getIdDep()== d.getIdDep()){
                pos = index;
                break;
            }
        }
        departamento.setSelectedItem(departamento.getItemAt(pos));
        
        for(int index=0; index<provincia.getItemCount(); index++){
            Provincia p = (Provincia) (provincia.getItemAt(index));
            if(lista.get(n).getProvincia().getIdProv()== p.getIdProv()){
                pos = index;
                break;
            }
        }
        provincia.setSelectedItem(provincia.getItemAt(pos));
                
        for(int index=0; index<distrito.getItemCount(); index++){
            Distrito d = (Distrito) (distrito.getItemAt(index));
            if(lista.get(n).getDistrito().getIdDist()== d.getIdDist()){
                pos = index;
                break;
            }
        }
        distrito.setSelectedItem(distrito.getItemAt(pos));
        idU = lista.get(n).getIdCliente();
    }//GEN-LAST:event_tablaMouseClicked

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        // TODO add your handling code here:
        
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¿Desea modificar la linea seleccionada?","Modificar Linea", JOptionPane.YES_NO_OPTION);
        if(YesOrNo == 0){
            boolean a = validarInput();
            if(!a) return;
            model = (javax.swing.table.DefaultTableModel)tabla.getModel();
            //idU++;

            Cliente c = null;
            String tipo = tipoCli.getSelectedItem().toString();
            if(tipo.equals("Persona")){
                //System.out.print("j");
                c = new Persona();
                ((Persona)c).setNombre(namae.getText());
                ((Persona)c).setApPaterno(apPat.getText());
                ((Persona)c).setApMaterno(apMat.getText());
                ((Persona)c).setNumDoc(numDoc.getText());
                ((Persona)c).setTipoDoc(((TipoDocumentoIdentidad)tipoDoc.getSelectedItem()));
            }else if(tipo.equals("Empresa")){
                //System.out.print("a");
                c = new Empresa();
                ((Empresa)c).setNombre(namae.getText());
                ((Empresa)c).setRuc(numDoc.getText());
            }

            c.setCorreo(email.getText());
            c.setDireccion(dir.getText());
            c.setTelefono(tlf.getText());
            c.setDepartamento(((Departamento)departamento.getSelectedItem()));
            c.setProvincia(((Provincia)provincia.getSelectedItem()));
            c.setDistrito(((Distrito)distrito.getSelectedItem()));
            c.setIdCliente(idU);
            int err = 0;
            try {
                err = LogicaNegocio.modificarCliente(c);
                listarClientes();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Object s[] ={idU, tipoCli.getSelectedItem().toString(), namae.getText(), numDoc.getText(), apPat.getText(), apMat.getText(), dir.getText(), tlf.getText(), email.getText()};

            //model.addRow(s);
            if(err ==0){
            dir.setText("");
            email.setText("");
            tlf.setText("");
            namae.setText("");
            numDoc.setText("");
            apPat.setText("");
            tipoCli.setSelectedItem(tipoCli.getItemAt(0));
            apMat.setText("");
            TapPat.setVisible(false);
            TapMat.setVisible(false);
            apPat.setVisible(false);
            apMat.setVisible(false);
            dir.setVisible(false);
            email.setVisible(false);
            tlf.setVisible(false);
            dirtxt.setVisible(false);
            emailtxt.setVisible(false);
            tlftxt.setVisible(false);
            namae.setVisible(false);
            namaetxt.setVisible(false);
            tipoDoc.setVisible(false);
            numDoc.setVisible(false);
            TnumDoc.setVisible(false);
            TtipoDoc.setVisible(false);
            departamento.setVisible(false);
            provincia.setVisible(false);
            distrito.setVisible(false);
            Tdepartamento.setVisible(false);
            Tprovincia.setVisible(false);
            Tdistrito.setVisible(false);
            registrar.setEnabled(false);
            modificar.setEnabled(false);
            eliminar.setEnabled(false);
        }else if(err == 1){
            if(tipo.equals("Persona")){
                JOptionPane.showMessageDialog(null, "El numero de documento de identidad ya se encuentra asociado a otro cliente", "Cliente ya registrado", JOptionPane.PLAIN_MESSAGE);
            }else if(tipo.equals("Empresa")){
                JOptionPane.showMessageDialog(null, "El RUC ya se encuentra asociado a otro cliente", "Cliente ya registrado", JOptionPane.PLAIN_MESSAGE);
            }
            
        }
        }
        
       
    }//GEN-LAST:event_modificarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here:
        
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¿Desea eliminar la linea seleccionada?","Eliminar Trabajador", JOptionPane.YES_NO_OPTION);
        if(YesOrNo != 0){
            return;
        }
        
        try {
            // TODO add your handling code here:
            LogicaNegocio.eliminarCliente(idU);
            listarClientes();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        }
        dir.setText("");
        email.setText("");
        tlf.setText("");
        namae.setText("");
        numDoc.setText("");
        apPat.setText("");
        tipoCli.setSelectedItem(tipoCli.getItemAt(0));
        apMat.setText("");
        TapPat.setVisible(false);
        TapMat.setVisible(false);
        apPat.setVisible(false);
        apMat.setVisible(false);
        dir.setVisible(false);
        email.setVisible(false);
        tlf.setVisible(false);
        dirtxt.setVisible(false);
        emailtxt.setVisible(false);
        tlftxt.setVisible(false);
        namae.setVisible(false);
        namaetxt.setVisible(false);
        tipoDoc.setVisible(false);
        numDoc.setVisible(false);
        TnumDoc.setVisible(false);
        TtipoDoc.setVisible(false);
        departamento.setVisible(false);
        provincia.setVisible(false);
        distrito.setVisible(false);
        Tdepartamento.setVisible(false);
        Tprovincia.setVisible(false);
        Tdistrito.setVisible(false);
        registrar.setEnabled(false);
        modificar.setEnabled(false);
        eliminar.setEnabled(false);
        
    }//GEN-LAST:event_eliminarActionPerformed
    ventanaLogin ventanaHome;
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¿Desea cerrar sesión?","Cerrar Sesión", JOptionPane.YES_NO_OPTION);
        if(YesOrNo == 0){
            ventanaHome.regresar();
            anterior.dispose();
            this.dispose();
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void namaeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaeActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¿Desea volver a la ventana anterior?","Volver", JOptionPane.YES_NO_OPTION);
        if(YesOrNo == 0){
            anterior.setVisible(true);
            anterior.jButton1.setEnabled(true);
            anterior.jButton2.setEnabled(true);
            anterior.jButton3.setEnabled(true);
            anterior.jButton4.setEnabled(true);
            anterior.jButton5.setEnabled(true);
            this.dispose();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void llenarComboBoxProv(int id) throws ClassNotFoundException, SQLException{
        ArrayList<Provincia> prov = LogicaNegocio.listarProvincias(id);
        //DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        int n = prov.size();
        /*try{
            //provincia.removeAllItems();
            int n1 = provincia.getItemCount();
            for(int j=0; j<n1; j++){
                provincia.removeItemAt(0);
            }
        } catch (Exception ex){
            
            //System.out.println(ex.getMessage());
        }*/
        
        for(int i=0; i<n; i++){
            //modelo.addElement(prov.get(i));
            provincia.addItem(prov.get(i));
        }
        //provincia.setModel(modelo);
        provincia.setVisible(true);
        Tprovincia.setVisible(true);
    }
    
    private void departamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departamentoActionPerformed
        try {
            // TODO add your handling code here:
            Departamento d = (Departamento) departamento.getSelectedItem();
            if(provincia.getItemCount()<1){
                llenarComboBoxProv(d.getIdDep());
            }
            provincia.setVisible(true);
            Tprovincia.setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_departamentoActionPerformed

    private void llenarComboBoxDist(int id) throws ClassNotFoundException, SQLException{
        ArrayList<Distrito> dist = LogicaNegocio.listarDistritos(id);
        //DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        int n = dist.size();
        distrito.removeAllItems();
        for(int i=0; i<n; i++){
            //modelo.addElement(dist.get(i));
            distrito.addItem(dist.get(i));
        }
        //distrito.setModel(modelo);
        distrito.setVisible(true);
        Tdistrito.setVisible(true);
    }
    
    private void provinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_provinciaActionPerformed
        try {
            // TODO add your handling code here:
            Provincia p = (Provincia) provincia.getSelectedItem();
            llenarComboBoxDist(p.getIdProv());
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_provinciaActionPerformed

    private void distritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distritoActionPerformed
        // TODO add your handling code here:
        dir.setVisible(true);
        dirtxt.setVisible(true);
    }//GEN-LAST:event_distritoActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        // TODO add your handling code here:
        int tipo = -1;
        if(tipoCli.getSelectedItem().toString().equals("Persona"))
            tipo = 1;
        else if(tipoCli.getSelectedItem().toString().equals("Empresa"))
            tipo = 2;
        if(tipo == -1){
            try {
                lista = LogicaNegocio.listarClientes();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            try {
                lista = LogicaNegocio.buscarClientes(tipo, namae.getText(), apPat.getText(), apMat.getText(), numDoc.getText(), numDoc.getText(), namae.getText());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ventanaMantCli.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        model = (javax.swing.table.DefaultTableModel)tabla.getModel();
        int n = lista.size();
        int r = model.getRowCount();
        for (int j=0; j<r; j++){
            model.removeRow(0);
        }
        for (int i=0; i<n; i++){
            String tipo1 = "";
            String doc = "";
            String nombre ="";
            if(lista.get(i) instanceof Persona){
                tipo1 = "Persona";
                doc = ((Persona)lista.get(i)).getNumDoc();
                nombre = ((Persona)lista.get(i)).getNombre()+" "+((Persona)lista.get(i)).getApPaterno()+" "+((Persona)lista.get(i)).getApMaterno();
            }else if(lista.get(i) instanceof Empresa){
                tipo1 = "Empresa";
                doc = ((Empresa)lista.get(i)).getRuc();
                nombre = ((Empresa)lista.get(i)).getNombre();
            }
            Object o[] = {lista.get(i).getIdCliente(), tipo1, doc, nombre, lista.get(i).getTelefono(), lista.get(i).getCorreo()};
            model.addRow(o);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void numDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numDocActionPerformed

    }//GEN-LAST:event_numDocActionPerformed

    private void numDocKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numDocKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c<'0' || c>'9') evt.consume();
        if(this.tipoCli.getSelectedItem().toString() == "Empresa"){
            if(numDoc.getText().length()>= 10) evt.consume();
        }else{
            TipoDocumentoIdentidad t = (TipoDocumentoIdentidad) tipoDoc.getSelectedItem();
            if(numDoc.getText().length()>= t.getCantChar()) evt.consume();
        }
        
    }//GEN-LAST:event_numDocKeyTyped

    private void namaeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_namaeKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(namaetxt.getText().equals("Nombre:")){
            if( c == '.' || c == ',') evt.consume();
        }
        if(!((c<='Z' && c>='A')||(c<='z' && c>='a')|| c == 'ñ' || c == 'Ñ' || c==' ' || c == '-' || c =='.' || c == ',')) evt.consume();
    }//GEN-LAST:event_namaeKeyTyped

    private void apPatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apPatKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!((c<='Z' && c>='A')||(c<='z' && c>='a')|| c == 'ñ' || c == 'Ñ' || c==' ' || c == '-')) evt.consume();
    }//GEN-LAST:event_apPatKeyTyped

    private void apMatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apMatKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!((c<='Z' && c>='A')||(c<='z' && c>='a')|| c == 'ñ' || c == 'Ñ' || c==' ' || c == '-')) evt.consume();
    }//GEN-LAST:event_apMatKeyTyped

    private void tlfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tlfKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!((c>='0' && c<='9'))) evt.consume();
        if(tlf.getText().length()>=9) evt.consume();
    }//GEN-LAST:event_tlfKeyTyped

    private void tipoDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoDocActionPerformed
        // TODO add your handling code here:
        //numDoc.setText("");
    }//GEN-LAST:event_tipoDocActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        // TODO add your handling code here:
        dir.setText("");
        email.setText("");
        tlf.setText("");
        namae.setText("");
        numDoc.setText("");
        apPat.setText("");
        tipoCli.setSelectedItem(tipoCli.getItemAt(0));
        apMat.setText("");
    }//GEN-LAST:event_limpiarActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TapMat;
    private javax.swing.JLabel TapPat;
    private javax.swing.JLabel Tdepartamento;
    private javax.swing.JLabel Tdistrito;
    private javax.swing.JLabel TnumDoc;
    private javax.swing.JLabel Tprovincia;
    private javax.swing.JLabel TtipoDoc;
    private javax.swing.JTextField apMat;
    private javax.swing.JTextField apPat;
    private javax.swing.JButton buscar;
    private javax.swing.JComboBox<Object> departamento;
    private javax.swing.JTextField dir;
    private javax.swing.JLabel dirtxt;
    private javax.swing.JComboBox<Object> distrito;
    private javax.swing.JButton eliminar;
    private javax.swing.JTextField email;
    private javax.swing.JLabel emailtxt;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton modificar;
    private javax.swing.JTextField namae;
    private javax.swing.JLabel namaetxt;
    private javax.swing.JTextField numDoc;
    private javax.swing.JComboBox<Object> provincia;
    private javax.swing.JButton registrar;
    private javax.swing.JTable tabla;
    private javax.swing.JComboBox<String> tipoCli;
    private javax.swing.JComboBox<Object> tipoDoc;
    private javax.swing.JTextField tlf;
    private javax.swing.JLabel tlftxt;
    // End of variables declaration//GEN-END:variables
}