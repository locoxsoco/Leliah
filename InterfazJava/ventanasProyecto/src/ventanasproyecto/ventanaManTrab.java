/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanasproyecto;

import LogicaNegocio.TrabajadorBL;
import clases.AdministradorSistema;
import clases.Jefe;
import clases.TiempoPago;
import clases.TipoDocumentoIdentidad;
import clases.Trabajador;
import clases.Vendedor;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Andres
 */
public class ventanaManTrab extends javax.swing.JFrame {

    /**
     * Creates new form ventanaManTrab
     */
    
    private TrabajadorBL LogicaNegocio;
    public ventanaManTrab() throws ClassNotFoundException, SQLException {
        initComponents();
        this.setTitle("Ventana Mantener Trabajadores");
        LogicaNegocio = new TrabajadorBL();
        lista = new ArrayList<Trabajador>();
        llenarComboBoxDoc();
        llenarComboBoxPago();
        listarTrabajadores();
        sueldo.setVisible(false);
        Tsueldo.setVisible(false);
        Thoras.setVisible(false);
        horas.setVisible(false);
        Ttipo.setVisible(false);
        frec.setVisible(false);
        moneda.setVisible(false);
        registrar.setEnabled(false);
        modificar.setEnabled(false);
        eliminar.setEnabled(false);
        //this.setTitle("Ventana Mantener Trabajadores");
        this.setLocationRelativeTo(null);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        tabla.getColumnModel().getColumn(0).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(1).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(2).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(3).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(4).setCellRenderer(tcr);
        tabla.getColumnModel().getColumn(5).setCellRenderer(tcr);
    }
    int idU;
    ventanaAdmin anterior;
    private ArrayList<Trabajador> lista;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Tsueldo = new javax.swing.JLabel();
        Thoras = new javax.swing.JLabel();
        Ttipo = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        apPat = new javax.swing.JTextField();
        apMat = new javax.swing.JTextField();
        user = new javax.swing.JTextField();
        fecha = new com.toedter.calendar.JDateChooser();
        pass = new javax.swing.JTextField();
        sueldo = new javax.swing.JTextField();
        frec = new javax.swing.JComboBox<>();
        horas = new javax.swing.JTextField();
        tipoUser = new javax.swing.JComboBox<>();
        registrar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tipoDoc = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        numDoc = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        moneda = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        limpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(830, 620));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Mantener Trabajadores");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(12, 13, 213, 22);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Nombre: *");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(12, 51, 90, 16);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Apellido Paterno: *");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(12, 86, 130, 16);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Apellido Materno: *");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(12, 121, 130, 16);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Usuario:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(12, 156, 53, 16);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Contrase√±a:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(12, 191, 80, 16);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Tipo Usuario:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(460, 121, 83, 16);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setText("Fecha Nacimiento:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(12, 226, 120, 16);

        Tsueldo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        Tsueldo.setText("Pago x Hora");
        getContentPane().add(Tsueldo);
        Tsueldo.setBounds(460, 156, 90, 16);

        Thoras.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        Thoras.setText("Horas Semanales:");
        getContentPane().add(Thoras);
        Thoras.setBounds(460, 191, 116, 16);

        Ttipo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        Ttipo.setText("Frecuencia Pago:");
        getContentPane().add(Ttipo);
        Ttipo.setBounds(460, 226, 120, 16);

        nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreKeyTyped(evt);
            }
        });
        getContentPane().add(nombre);
        nombre.setBounds(142, 48, 200, 20);

        apPat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                apPatKeyTyped(evt);
            }
        });
        getContentPane().add(apPat);
        apPat.setBounds(142, 83, 200, 20);

        apMat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                apMatKeyTyped(evt);
            }
        });
        getContentPane().add(apMat);
        apMat.setBounds(142, 118, 200, 20);

        user.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                userKeyTyped(evt);
            }
        });
        getContentPane().add(user);
        user.setBounds(142, 153, 200, 20);
        getContentPane().add(fecha);
        fecha.setBounds(140, 223, 200, 20);

        pass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passKeyTyped(evt);
            }
        });
        getContentPane().add(pass);
        pass.setBounds(142, 188, 200, 20);

        sueldo.setMinimumSize(new java.awt.Dimension(850, 650));
        sueldo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sueldoKeyTyped(evt);
            }
        });
        getContentPane().add(sueldo);
        sueldo.setBounds(600, 153, 140, 20);

        getContentPane().add(frec);
        frec.setBounds(600, 223, 140, 20);

        horas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                horasKeyTyped(evt);
            }
        });
        getContentPane().add(horas);
        horas.setBounds(600, 188, 200, 20);

        tipoUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoja...", "Administrador del Sistema", "Jefe", "Vendedor" }));
        tipoUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoUserActionPerformed(evt);
            }
        });
        getContentPane().add(tipoUser);
        tipoUser.setBounds(600, 118, 200, 20);

        registrar.setBackground(new java.awt.Color(255, 255, 204));
        registrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        registrar.setText("Registrar");
        registrar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarActionPerformed(evt);
            }
        });
        getContentPane().add(registrar);
        registrar.setBounds(12, 270, 100, 29);

        modificar.setBackground(new java.awt.Color(255, 255, 204));
        modificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/modificar.png"))); // NOI18N
        modificar.setText("Modificar");
        modificar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });
        getContentPane().add(modificar);
        modificar.setBounds(262, 270, 100, 29);

        eliminar.setBackground(new java.awt.Color(255, 255, 204));
        eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar.png"))); // NOI18N
        eliminar.setText("Eliminar");
        eliminar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(eliminar);
        eliminar.setBounds(387, 270, 100, 29);

        tabla.setBackground(new java.awt.Color(255, 255, 204));
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre Completo", "Usuario", "Contrase√±a", "Fecha", "Tipo Usuario"
            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setMaxWidth(50);
            tabla.getColumnModel().getColumn(5).setMinWidth(100);
            tabla.getColumnModel().getColumn(5).setMaxWidth(100);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 320, 790, 193);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logout.png"))); // NOI18N
        jButton4.setText("Cerrar Sesi√≥n");
        jButton4.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(670, 530, 130, 29);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/volver.png"))); // NOI18N
        jButton5.setText("Volver");
        jButton5.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(560, 530, 90, 29);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("Tipo Documento:");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(460, 51, 110, 16);

        tipoDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoDocActionPerformed(evt);
            }
        });
        getContentPane().add(tipoDoc);
        tipoDoc.setBounds(600, 48, 200, 20);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setText("N√∫mero Documento:*");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(460, 86, 160, 16);

        numDoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numDocKeyTyped(evt);
            }
        });
        getContentPane().add(numDoc);
        numDoc.setBounds(600, 83, 200, 20);

        buscar.setBackground(new java.awt.Color(255, 255, 204));
        buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar.png"))); // NOI18N
        buscar.setText("Buscar");
        buscar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar);
        buscar.setBounds(137, 270, 100, 29);

        moneda.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        moneda.setText("S./");
        getContentPane().add(moneda);
        moneda.setBounds(750, 156, 48, 16);

        jLabel11.setText("La busqueda se realiza con los campos marcados con *.");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(12, 540, 510, 14);

        limpiar.setBackground(new java.awt.Color(255, 255, 204));
        limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nuevo.png"))); // NOI18N
        limpiar.setText("Limpiar Campos");
        limpiar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(limpiar);
        limpiar.setBounds(510, 270, 140, 29);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private boolean isDouble(String cadena) {

        boolean resultado;

        try {
            Double.parseDouble(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }
    
    private void llenarComboBoxDoc() throws ClassNotFoundException, SQLException{
        ArrayList<TipoDocumentoIdentidad> docs = LogicaNegocio.listarDocumentos();
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        int n = docs.size();
        for(int i=0; i<n; i++){
            modelo.addElement(docs.get(i));
        }
        tipoDoc.setModel(modelo);
    }
    
    private void llenarComboBoxPago() throws ClassNotFoundException, SQLException{
        ArrayList<TiempoPago> docs = LogicaNegocio.listarTiempoPago();
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        int n = docs.size();
        for(int i=0; i<n; i++){
            modelo.addElement(docs.get(i));
        }
        frec.setModel(modelo);
    }
    
    private void listarTrabajadores() throws ClassNotFoundException, SQLException{
        lista = LogicaNegocio.listarTrabajadores();
        model = (javax.swing.table.DefaultTableModel)tabla.getModel();
        int n = lista.size();
        int r = model.getRowCount();
        for (int j=0; j<r; j++){
            model.removeRow(0);
        }
        for (int i=0; i<n; i++){
            String tipo = "";
            if(lista.get(i) instanceof Jefe)
                tipo = "Jefe";
            else if(lista.get(i) instanceof AdministradorSistema)
                tipo = "Administrador del Sistema";
            else if(lista.get(i) instanceof Vendedor)
                tipo = "Vendedor";
            Object o[] = {lista.get(i).getId(), lista.get(i).getNombre()+" "+lista.get(i).getApPaterno()+" "+lista.get(i).getApMaterno() , lista.get(i).getUsername(), lista.get(i).getContrasena(), lista.get(i).getFecha().toString(),tipo};
            model.addRow(o);
        }
    }
    
    private boolean validarInput(){
        String s = this.nombre.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(s.length()>45){
            JOptionPane.showMessageDialog(null, "nombre no puede tener m√°s de 45 caracteres", "Error Nombre", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        for (int i=0; i<s.length(); i++){
            if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == '√±' || s.charAt(i) == '√ë' || s.charAt(i)== ' ')){
                JOptionPane.showMessageDialog(null, "campo nombre solo puede contener letras", "Error Nombre", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
        }
        s = this.apPat.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(s.length()>45){
            JOptionPane.showMessageDialog(null, "Apellido Paterno no puede tener m√°s de 45 caracteres", "Error Apellido Paterno", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        for (int i=0; i<s.length(); i++){
            if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == '√±' || s.charAt(i) == '√ë' || s.charAt(i)== ' ')){
                JOptionPane.showMessageDialog(null, "campo apellido paterno solo puede contener letras", "Error Apellido Paterno", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
        }
        
        s = this.apMat.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(s.length()>45){
            JOptionPane.showMessageDialog(null, "Apellido Materno no puede tener m√°s de 45 caracteres", "Error Apellido Paterno", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        for (int i=0; i<s.length(); i++){
            if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == '√±' || s.charAt(i) == '√ë' || s.charAt(i)== ' ')){
                JOptionPane.showMessageDialog(null, "campo apellido Materno solo puede contener letras", "Error Apellido Materno", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
        }
        
        /*for (int i=0; i<s.length(); i++){
            if(!((s.charAt(i)>='a' && s.charAt(i)<='z')||(s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == '√±' || s.charAt(i) == '√ë' || s.charAt(i)== ' ')){
                JOptionPane.showMessageDialog(null, "campo apellido materno solo puede contener letras", "Error Apellido Materno", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
        }*/
        s = this.user.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(s.length()>45){
            JOptionPane.showMessageDialog(null, "Usuario no puede tener m√°s de 20 caracteres", "Error Usuario", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        s = this.pass.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(s.length()>20){
            JOptionPane.showMessageDialog(null, "Contrase√±a no puede tener m√°s de 20 caracteres", "Error Contrase√±a", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        boolean tieneNum = false;
        boolean tieneMayus = false;
        boolean tieneMinus = false;
        for (int i=0; i<s.length(); i++){
            if((s.charAt(i)>='a' && s.charAt(i)<='z') || s.charAt(i) == 'n'){
                tieneMinus = true;
            }else if((s.charAt(i)>='A' && s.charAt(i)<='Z') || s.charAt(i) == 'N'){
                tieneMayus = true;
            }else if(s.charAt(i)>='0' && s.charAt(i)<='9'){
                tieneNum = true;
            }
        }
        
        
        
        if(s.length()<8){
            JOptionPane.showMessageDialog(null, "Contrase√±a muy peque√±a, m√≠nimo 8 caracteres", "Error Contrase√±a", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(!tieneNum){
            JOptionPane.showMessageDialog(null, "Contrase√±a necesita almenos un n√∫mero", "Error Contrase√±a", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(!tieneMayus){
            JOptionPane.showMessageDialog(null, "Contrase√±a necesita almenos una may√∫scula", "Error Contrase√±a", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        if(!tieneMinus){
            JOptionPane.showMessageDialog(null, "Contrase√±a necesita almenos una minuscula", "Error Contrase√±a", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        
        
        java.util.Date fecha1 = new java.util.Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fecha1);
        calendar.add(Calendar.YEAR, -18);
        //String s1 = ;
        //System.out.println(s1);
        /*if(this.fecha.isValid()){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }*/
        
        java.sql.Date sqlDate = new java.sql.Date(fecha.getDate().getTime());
        java.sql.Date fechaMin = new java.sql.Date(calendar.getTime().getTime());
        //System.out.println(fechaMin);
        //System.out.println(sqlDate);
        if(fechaMin.before(sqlDate)){
            JOptionPane.showMessageDialog(null, "Un menor de edad no puede trabajar", "Error Fecha Nacimiento", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        String s1;
        s = this.numDoc.getText();
        if((s).equals("")){
            JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        TipoDocumentoIdentidad t = (TipoDocumentoIdentidad) tipoDoc.getSelectedItem();
        if(s.length() != t.getCantChar()){
            JOptionPane.showMessageDialog(null, "El "+t.getNombTipo()+ " debe tener "+t.getCantChar()+" digitos", "Error Documento", JOptionPane.PLAIN_MESSAGE);
            return false;
        }
        
        s = this.tipoUser.getSelectedItem().toString();
        if(s =="Administrador del Sistema"){
            s1 = this.sueldo.getText();
            if((s1).equals("")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            if(!isDouble(s1)){
                JOptionPane.showMessageDialog(null, "Sueldo debe ser un valor real", "Error Sueldo", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            int hayP = 0;
            int cantDec = 0;
            for(int i=0; i<s1.length(); i++){
                if(hayP == 1){
                    cantDec++;
                }
                if(s1.charAt(i) == '.') hayP = 1;
            }
            if(cantDec>2){
                JOptionPane.showMessageDialog(null, "Sueldo solo puede tener 2 decimales", "Error Sueldo", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
        }else if(s == "Vendedor"){
            s1 = this.sueldo.getText();
            if((s1).equals("")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            /*if((s != null && s.matches("[-+]?\\d*\\.?\\d+"))){
                JOptionPane.showMessageDialog(null, "Sueldo debe ser un valor real", "Error Sueldo", JOptionPane.PLAIN_MESSAGE);
                return false;
            }*/
            
            if(!isDouble(s1)){
                JOptionPane.showMessageDialog(null, "Pago por Hora debe ser un valor real", "Error Sueldo", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            int hayP = 0;
            int cantDec = 0;
            for(int i=0; i<s1.length(); i++){
                if(hayP == 1){
                    cantDec++;
                }
                if(s1.charAt(i) == '.') hayP = 1;
            }
            if(cantDec>2){
                JOptionPane.showMessageDialog(null, "Pago por Hora solo puede tener 2 decimales", "Error Sueldo", JOptionPane.PLAIN_MESSAGE);
                return false;
            }    

            s1 = this.horas.getText();
            if((s1).equals("")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            int cant = Integer.parseInt(s1);
            if(cant>178){
                JOptionPane.showMessageDialog(null, "La semana solo tiene 178 horas", "Error Horas Semanales", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            for (int i=0; i<s1.length(); i++){
                if(!(s1.charAt(i)>='0' && s1.charAt(i)<='9')){
                    JOptionPane.showMessageDialog(null, "Horas semanales debe ser un valor entero positivo", "Error Edad", JOptionPane.PLAIN_MESSAGE);
                    return false;
                }
            }
            s1 = this.frec.getSelectedItem().toString();
            if((s1).equals("Escoja...")){
                JOptionPane.showMessageDialog(null, "No puede dejar campos activos vacios", "Error Null", JOptionPane.PLAIN_MESSAGE);
                return false;
            }
            /*for (int i=0; i<s1.length(); i++){
                if(!((s1.charAt(i)>='a' && s1.charAt(i)<='z')||(s1.charAt(i)>='A' && s1.charAt(i)<='Z') || s1.charAt(i) == 'n' || s1.charAt(i) == 'N')){
                    JOptionPane.showMessageDialog(null, "campo tipo pago solo puede contener letras", "Error Tipo Pago", JOptionPane.PLAIN_MESSAGE);
                    return false;
                }
            }*/
            
            
        }
        return true;
    }
    
    private void tipoUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoUserActionPerformed
        // TODO add your handling code here:
        String s = this.tipoUser.getSelectedItem().toString();
        if(s == "Escoja..."){
            Ttipo.setVisible(false);
            Tsueldo.setVisible(false);
            Thoras.setVisible(false);
            frec.setVisible(false);
            sueldo.setVisible(false);
            horas.setVisible(false);
            moneda.setVisible(false);
            registrar.setEnabled(false);
        }else if (s == "Jefe"){
            Ttipo.setVisible(false);
            Tsueldo.setVisible(false);
            Thoras.setVisible(false);
            frec.setVisible(false);
            sueldo.setVisible(false);
            horas.setVisible(false);
            registrar.setEnabled(true);
            moneda.setVisible(false);
        }else if (s == "Administrador del Sistema"){
            Ttipo.setVisible(false);
            Tsueldo.setText("Sueldo:");
            Tsueldo.setVisible(true);
            Thoras.setVisible(false);
            frec.setVisible(false);
            sueldo.setText("");
            sueldo.setVisible(true);
            horas.setVisible(false);
            moneda.setVisible(true);
            registrar.setEnabled(true);
            
        }else if (s == "Vendedor"){
            Ttipo.setVisible(true);
            Tsueldo.setText("Pago x Hora:");
            Tsueldo.setVisible(true);
            Thoras.setVisible(true);
            frec.setSelectedItem(frec.getItemAt(0));
            frec.setVisible(true);
            sueldo.setText("");
            sueldo.setVisible(true);
            horas.setText("");
            horas.setVisible(true);
            moneda.setVisible(true);
            registrar.setEnabled(true);
        }
    }//GEN-LAST:event_tipoUserActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¬øDesea volver a la ventana anterior?","Volver", JOptionPane.YES_NO_OPTION);
        if(YesOrNo == 0){
            anterior.setVisible(true);
            anterior.jButton1.setEnabled(true);
            anterior.jButton2.setEnabled(true);
            anterior.jButton3.setEnabled(true);
            anterior.jButton4.setEnabled(true);
            anterior.jButton5.setEnabled(true);
            this.dispose();
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed
    javax.swing.table.DefaultTableModel model;
    private void registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarActionPerformed
        // TODO add your handling code here:
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¬øDesea registrar el trabajador?","Registrar Trabajador", JOptionPane.YES_NO_OPTION);
        if(YesOrNo != 0){
            return;
        }
        
        boolean a = validarInput();
        if (!a) return;
        model = (javax.swing.table.DefaultTableModel)tabla.getModel();
        //SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        
        Trabajador t = null;
        String tipo = tipoUser.getSelectedItem().toString();
        if(tipo.equals("Jefe")){
            t = new Jefe();
        }else if(tipo.equals("Administrador del Sistema")){
            t = new AdministradorSistema();
            ((AdministradorSistema)t).setSueldo(Double.parseDouble(sueldo.getText()));
        }else if(tipo.equals("Vendedor")){
            t = new Vendedor();
            ((Vendedor)t).setTiempoPago((TiempoPago) frec.getSelectedItem());
            ((Vendedor)t).setHoraxSemana(Integer.parseInt(horas.getText()));
            ((Vendedor)t).setPagoxHora(Double.parseDouble(sueldo.getText()));
        }
        t.setNombre(nombre.getText());
        t.setApPaterno(apPat.getText());
        t.setApMaterno(apMat.getText());
        t.setUsername(user.getText());
        t.setContrasena(pass.getText());
        java.sql.Date sqlDate = new java.sql.Date(fecha.getDate().getTime());
        t.setFecha(sqlDate);
        //System.out.println(sdf.format(t.getFecha()));
        t.setNumDoc(numDoc.getText());
        t.setTipoDoc((TipoDocumentoIdentidad) tipoDoc.getSelectedItem());
        int err = -1;
        try {
            err = LogicaNegocio.registrarTrabajador(t);
            listarTrabajadores();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(err == 0){
            nombre.setText("");
            apPat.setText("");
            apMat.setText("");
            user.setText("");
            pass.setText("");
            fecha.setDate(null);
            tipoDoc.setSelectedItem(tipoDoc.getItemAt(0));
            numDoc.setText("");
            tipoUser.setSelectedItem(tipoUser.getItemAt(0));
            sueldo.setText("");
            horas.setText("");
            frec.setSelectedItem(frec.getItemAt(0));
            registrar.setEnabled(false);
            modificar.setEnabled(false);
            eliminar.setEnabled(false);
            sueldo.setVisible(false);
            Tsueldo.setVisible(false);
            Thoras.setVisible(false);
            horas.setVisible(false);
            Ttipo.setVisible(false);
            frec.setVisible(false);
            moneda.setVisible(false);
        }else if(err == 1){
            JOptionPane.showMessageDialog(null, "El numero de documento de identidad ya se encuentra asociado a otro trabajador", "Trabajador ya registrado", JOptionPane.PLAIN_MESSAGE);
        }else if(err == 2){
            JOptionPane.showMessageDialog(null, "El username ya se encuentra asociado a otro trabajador", "Trabajador ya registrado", JOptionPane.PLAIN_MESSAGE);
        }
        

    }//GEN-LAST:event_registrarActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        // TODO add your handling code here:
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¬øDesea modificar la linea seleccionada?","Modificar Trabajador", JOptionPane.YES_NO_OPTION);
        if(YesOrNo != 0){
            return;
        }
        
        boolean a = validarInput();
        if(!a) return;
        model = (javax.swing.table.DefaultTableModel)tabla.getModel();
        Trabajador t = null;
        String tipo = tipoUser.getSelectedItem().toString();
        if(tipo.equals("Jefe")){
            t = new Jefe();
        }else if(tipo.equals("Administrador del Sistema")){
            t = new AdministradorSistema();
            ((AdministradorSistema)t).setSueldo(Double.parseDouble(sueldo.getText()));
        }else if(tipo.equals("Vendedor")){
            t = new Vendedor();
            ((Vendedor)t).setTiempoPago((TiempoPago) frec.getSelectedItem());
            ((Vendedor)t).setHoraxSemana(Integer.parseInt(horas.getText()));
            ((Vendedor)t).setPagoxHora(Double.parseDouble(sueldo.getText()));
        }
        t.setNombre(nombre.getText());
        t.setApPaterno(apPat.getText());
        t.setApMaterno(apMat.getText());
        t.setUsername(user.getText());
        t.setContrasena(pass.getText());
        java.sql.Date sqlDate = new java.sql.Date(fecha.getDate().getTime());
        t.setFecha(sqlDate);
        //System.out.println(sdf.format(t.getFecha()));
        t.setNumDoc(numDoc.getText());
        t.setTipoDoc((TipoDocumentoIdentidad) tipoDoc.getSelectedItem());
        t.setId(idU);
        int err =0;
        try {
            err = LogicaNegocio.modificarTrabajador(t);
            listarTrabajadores();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        }

        if(err == 0){
            nombre.setText("");
            apPat.setText("");
            apMat.setText("");
            user.setText("");
            pass.setText("");
            fecha.setDate(null);
            tipoDoc.setSelectedItem(tipoDoc.getItemAt(0));
            numDoc.setText("");
            tipoUser.setSelectedItem(tipoUser.getItemAt(0));
            sueldo.setText("");
            horas.setText("");
            frec.setSelectedItem(frec.getItemAt(0));
            registrar.setEnabled(false);
            modificar.setEnabled(false);
            eliminar.setEnabled(false);
            sueldo.setVisible(false);
            Tsueldo.setVisible(false);
            Thoras.setVisible(false);
            horas.setVisible(false);
            Ttipo.setVisible(false);
            frec.setVisible(false);
            moneda.setVisible(false);
        }else if(err == 1){
            JOptionPane.showMessageDialog(null, "El numero de documento de identidad ya se encuentra asociado a otro trabajador", "Trabajador ya registrado", JOptionPane.PLAIN_MESSAGE);
        }else if(err == 2){
            JOptionPane.showMessageDialog(null, "El username ya se encuentra asociado a otro trabajador", "Trabajador ya registrado", JOptionPane.PLAIN_MESSAGE);
        }

    }//GEN-LAST:event_modificarActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        // TODO add your handling code here:
        int n = tabla.getSelectedRow();
        model = (javax.swing.table.DefaultTableModel)tabla.getModel();
        //nombre.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 1)));
        //apPat.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 2)));
        //apMat.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 3)));
        //user.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 4)));
        //pass.setText(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 5)));
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        nombre.setText(lista.get(n).getNombre());
        apPat.setText(lista.get(n).getApPaterno());
        apMat.setText(lista.get(n).getApMaterno());
        user.setText(lista.get(n).getUsername());
        pass.setText(lista.get(n).getContrasena());
        fecha.setDate(lista.get(n).getFecha());
        int k = tipoDoc.getItemCount();
        for(int i=0; i<k; i++){
            TipoDocumentoIdentidad t = (TipoDocumentoIdentidad) tipoDoc.getItemAt(i);
            if(t.getIdTipo()==lista.get(n).getTipoDoc().getIdTipo()){
                tipoDoc.setSelectedItem(tipoDoc.getItemAt(i));
            }
        }
        
        numDoc.setText(lista.get(n).getNumDoc());
        if(lista.get(n) instanceof Jefe){
            sueldo.setVisible(false);
            Tsueldo.setVisible(false);
            Thoras.setVisible(false);
            horas.setVisible(false);
            Ttipo.setVisible(false);
            frec.setVisible(false);
            moneda.setVisible(false);
            tipoUser.setSelectedItem("Jefe");
        }else if(lista.get(n) instanceof AdministradorSistema){
            sueldo.setVisible(true);
            Tsueldo.setText("Sueldo:");
            Tsueldo.setVisible(true);
            Thoras.setVisible(false);
            horas.setVisible(false);
            Ttipo.setVisible(false);
            frec.setVisible(false);
            moneda.setVisible(true);
            tipoUser.setSelectedItem("Administrador del Sistema");
            sueldo.setText(String.valueOf(((AdministradorSistema)lista.get(n)).getSueldo()));
        }else if(lista.get(n) instanceof Vendedor){
            sueldo.setVisible(true);
            Tsueldo.setText("Pago x Hora:");
            Tsueldo.setVisible(true);
            Thoras.setVisible(true);
            horas.setVisible(true);
            Ttipo.setVisible(true);
            frec.setVisible(true);
            moneda.setVisible(true);
            tipoUser.setSelectedItem("Vendedor");
            sueldo.setText(String.valueOf(((Vendedor)lista.get(n)).getPagoxHora()));
            horas.setText(String.valueOf(((Vendedor)lista.get(n)).getHoraxSemana()));
            frec.setSelectedItem(((Vendedor)lista.get(n)).getTiempoPago().getNombTiempo());
        }
        
        idU = Integer.parseInt(String.valueOf(model.getValueAt(tabla.getSelectedRow(), 0)));
        /*try {
            fecha.setDate(sdf.parse((model.getValueAt(tabla.getSelectedRow(), 6).toString())));
        } catch (ParseException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        modificar.setEnabled(true);
        eliminar.setEnabled(true);
        /*ComboItem item;
        for (int i=0; i< tipoUser.getItemCount(); i++){
            item = tipoUser.getItemAt(i);
            if(item)
        }*/
    }//GEN-LAST:event_tablaMouseClicked

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¬øDesea eliminar la linea seleccionada?","Eliminar Trabajador", JOptionPane.YES_NO_OPTION);
        if(YesOrNo != 0){
            return;
        }
        
        try {
            // TODO add your handling code here:
            LogicaNegocio.eliminarTrabajador(idU);
            listarTrabajadores();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        nombre.setText("");
        apPat.setText("");
        apMat.setText("");
        user.setText("");
        pass.setText("");
        fecha.setDate(null);
        tipoDoc.setSelectedItem(tipoDoc.getItemAt(0));
        numDoc.setText("");
        tipoUser.setSelectedItem(tipoUser.getItemAt(0));
        sueldo.setText("");
        horas.setText("");
        frec.setSelectedItem(frec.getItemAt(0));
        registrar.setEnabled(false);
        modificar.setEnabled(false);
        eliminar.setEnabled(false);
        sueldo.setVisible(false);
        Tsueldo.setVisible(false);
        Thoras.setVisible(false);
        horas.setVisible(false);
        Ttipo.setVisible(false);
        frec.setVisible(false);
        moneda.setVisible(false);
    }//GEN-LAST:event_eliminarActionPerformed
    ventanaLogin ventanaHome;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int YesOrNo = JOptionPane.showConfirmDialog(null, "¬øDesea cerrar sesi√≥n?","Cerrar Sesi√≥n", JOptionPane.YES_NO_OPTION);
        if(YesOrNo == 0){
            ventanaHome.regresar();
            anterior.dispose();
            this.dispose();
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        try {
            int privI = -1;
            String tipo1 = tipoUser.getSelectedItem().toString();
            
            if(tipo1.equals("Jefe")){
                privI = 1;
            }else if(tipo1.equals("Administrador del Sistema")){
                privI = 2;
            }else if(tipo1.equals("Vendedor")){
                privI = 3;
            }
            lista = LogicaNegocio.buscarTrabajadores(nombre.getText(), apPat.getText(), apMat.getText(), user.getText(), privI, numDoc.getText());
            model = (javax.swing.table.DefaultTableModel)tabla.getModel();
            int n = lista.size();
            int r = model.getRowCount();
            for (int j=0; j<r; j++){
                model.removeRow(0);
            }
            for (int i=0; i<n; i++){
                String tipo = "";
                if(lista.get(i) instanceof Jefe)
                    tipo = "Jefe";
                else if(lista.get(i) instanceof AdministradorSistema)
                    tipo = "Administrador del Sistema";
                else if(lista.get(i) instanceof Vendedor)
                    tipo = "Vendedor";
                Object o[] = {lista.get(i).getId(), lista.get(i).getNombre()+" "+lista.get(i).getApPaterno()+" "+lista.get(i).getApMaterno() , lista.get(i).getUsername(), lista.get(i).getContrasena(), lista.get(i).getFecha().toString(),tipo};
                model.addRow(o);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ventanaManTrab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!((c<='Z' && c>='A')||(c<='z' && c>='a')|| c == '√±' || c == '√ë' || c==' ' || c == '-')) evt.consume();
        if(nombre.getText().length()>=45) evt.consume();
    }//GEN-LAST:event_nombreKeyTyped

    private void apPatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apPatKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!((c<='Z' && c>='A')||(c<='z' && c>='a')|| c == '√±' || c == '√ë' || c==' ' || c == '-')) evt.consume();
        if(apPat.getText().length()>45) evt.consume();
    }//GEN-LAST:event_apPatKeyTyped

    private void apMatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apMatKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!((c<='Z' && c>='A')||(c<='z' && c>='a')|| c == '√±' || c == '√ë' || c==' ' || c == '-')) evt.consume();
        if(apMat.getText().length()>45) evt.consume();
    }//GEN-LAST:event_apMatKeyTyped

    private void numDocKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numDocKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c<'0' || c>'9') evt.consume();
        TipoDocumentoIdentidad t = (TipoDocumentoIdentidad) tipoDoc.getSelectedItem();
        if(numDoc.getText().length()>= t.getCantChar()) evt.consume();
    }//GEN-LAST:event_numDocKeyTyped

    private void sueldoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sueldoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        String s = sueldo.getText();
        if(s.contains(".")){
            if(c =='.') evt.consume();
        }
        if(!((c>='0' && c<='9')|| c=='.')) evt.consume();
        if(s.length()>=10) evt.consume();
    }//GEN-LAST:event_sueldoKeyTyped

    private void horasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_horasKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(c<'0' || c>'9') evt.consume();
        if(horas.getText().length()>3) evt.consume();
    }//GEN-LAST:event_horasKeyTyped

    private void tipoDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoDocActionPerformed
        // TODO add your handling code here:
        numDoc.setText("");
    }//GEN-LAST:event_tipoDocActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        // TODO add your handling code here:
        nombre.setText("");
        apPat.setText("");
        apMat.setText("");
        user.setText("");
        pass.setText("");
        fecha.setDate(null);
        tipoDoc.setSelectedItem(tipoDoc.getItemAt(0));
        numDoc.setText("");
        tipoUser.setSelectedItem(tipoUser.getItemAt(0));
        sueldo.setText("");
        horas.setText("");
        frec.setSelectedItem(frec.getItemAt(0));
        registrar.setEnabled(false);
        modificar.setEnabled(false);
        eliminar.setEnabled(false);
        sueldo.setVisible(false);
        Tsueldo.setVisible(false);
        Thoras.setVisible(false);
        horas.setVisible(false);
        Ttipo.setVisible(false);
        frec.setVisible(false);
        moneda.setVisible(false);
    }//GEN-LAST:event_limpiarActionPerformed

    private void userKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userKeyTyped
        // TODO add your handling code here:
        if(user.getText().length()>20) evt.consume();
    }//GEN-LAST:event_userKeyTyped

    private void passKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passKeyTyped
        // TODO add your handling code here:
        if(pass.getText().length()>20) evt.consume();
    }//GEN-LAST:event_passKeyTyped
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel Thoras;
    public static javax.swing.JLabel Tsueldo;
    public static javax.swing.JLabel Ttipo;
    public static javax.swing.JTextField apMat;
    public static javax.swing.JTextField apPat;
    private javax.swing.JButton buscar;
    private javax.swing.JButton eliminar;
    private com.toedter.calendar.JDateChooser fecha;
    private javax.swing.JComboBox<String> frec;
    public static javax.swing.JTextField horas;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton modificar;
    private javax.swing.JLabel moneda;
    public static javax.swing.JTextField nombre;
    private javax.swing.JTextField numDoc;
    public static javax.swing.JTextField pass;
    private javax.swing.JButton registrar;
    public static javax.swing.JTextField sueldo;
    public static javax.swing.JTable tabla;
    private javax.swing.JComboBox<Object> tipoDoc;
    public static javax.swing.JComboBox<String> tipoUser;
    public static javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables
}
